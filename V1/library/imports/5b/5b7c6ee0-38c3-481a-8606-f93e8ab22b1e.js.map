{"version":3,"sources":["assets\\scripts\\utils\\axiosUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oBAAoB;AACpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuDG;AACH,QAAQ;AACR,mDAAuC;AACvC,OAAO;AACP,2DAA8C;AAC9C,SAAS;AACT,IAAM,KAAK,GAAG,MAAM,CAAC;AACrB,UAAU;AACV,IAAI,KAAK,GAAQ,KAAK,CAAC;AACvB,QAAQ;AACR,IAAM,YAAY,GAAG,wBAAM,CAAC,MAAM,CAAC;AACnC,SAAS;AACT,IAAM,YAAY,GAAQ,EAAE,CAAC;AAC7B,MAAM;AACN,IAAM,QAAQ,GAAQ;IACpB;;OAEG;IACH,QAAQ,EAAE;QACR;;WAEG;QACH,WAAW,EAAE,EAAE;QACf;;WAEG;QACH,KAAK,EAAE,EAAE;QACT;;WAEG;QACH,OAAO,EAAE,EAAE;KACZ;CACF,CAAC;AACF,MAAM;AACN,IAAM,YAAY,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAC9C,IAAM,WAAW,GAAG,wBAAwB,CAAC;AAE7C,IAAI,WAAqE,CAAC;AAE1E;IAAA;IAwKA,CAAC;IA9JC;;;;;OAKG;IACU,gBAAO,GAApB,UAAqB,MAAqD,EAAE,GAAW,EAAE,MAAgB,EAAE,GAAY;QAAlG,uBAAA,EAAA,cAAqD;QAAe,uBAAA,EAAA,WAAgB;;;;gBACrG,IAAI,CAAC,KAAK,EAAE;oBACV,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC;oBACpG,IAAI,KAAK,EAAE;wBACT,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;wBAClC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,EAAO,IAAK,OAAA,EAAE,CAAC,KAAK,CAAC,EAAT,CAAS,CAAC,CAAC;qBAC/D;iBACF;;oBAAM,KAAK,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC;gBAErC,OAAO,GAAG,EAAE,CAAC;gBACT,IAAI,GAAK,MAAM,KAAX,CAAY;gBACxB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;oBAC/B,OAAO,IAAI,GAAG,GAAG,GAAG,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;gBAC/D,CAAC,CAAC,CAAA;gBAEF,IAAI,OAAO,KAAK,EAAE,EAAE;oBAChB,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;oBACtD,IAAI,MAAM,KAAK,KAAK,EAAE;wBACpB,GAAG,IAAI,GAAG,GAAG,OAAO,CAAC;qBACtB;iBACJ;gBAGK,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;gBACtD,IAAI,MAAM,IAAI,GAAG,EAAE;oBACjB,KAAW,GAAG,IAAI,MAAM,EAAE;wBACxB,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;4BAC7B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,MAAI,GAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;yBAC3C;qBACF;oBACD,OAAO,MAAM,CAAC,MAAM,CAAC;oBACrB,IAAI,IAAI;wBAAE,OAAO,IAAI,CAAC,MAAM,CAAC;iBAC9B;gBAED,SAAS;gBACT,IAAI,GAAG,IAAI,GAAG,EAAE;oBACR,YAAY,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1D,IAAI,YAAY,EAAE;wBACV,WAAW,GAAG,YAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;wBACxD,IAAI,WAAW,EAAE;4BACf,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;4BAClC,MAAM,CAAC,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC;yBAClE;;4BAAO,MAAM,KAAK,CAAI,YAAY,6DAAa,CAAC,CAAC;qBACnD;oBACD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,2BAA2B,EAAE,EAAE,CAAC,CAAC;iBACpD;gBAIK,UAAU,GAAG,MAAM,GAAG,GAAG,CAAC;gBAChC,IAAI,UAAU,EAAE;oBACR,WAAW,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;oBAC7C,IAAI,WAAW,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE;wBAC3C,sBAAO,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,UAAU,YAAA,EAAE,CAAC,EAAC;qBACzD;oBACD,+CAA+C;oBAC/C,YAAY,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;iBAC3C;gBAED,IAAI,GAAG,EAAE;oBACP,GAAG,GAAG,QAAQ,CAAC,OAAO,GAAG,GAAG,CAAC;iBAC9B;gBACD,sBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;wBACjC,IAAI,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;wBACxC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;wBAChD,GAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAG,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,mCAAmC,CAAC,CAAC,CAAC,YAAY,oBAAiB,CAAC,CAAC;wBAChI,GAAG,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;wBACrC,GAAG,CAAC,kBAAkB,GAAG;4BACvB,IAAI,GAAG,CAAC,UAAU,KAAK,CAAC,EAAE;gCACxB,IAAI,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC;gCAChC,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,EAAE;oCACzC,IAAM,KAAG,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC;oCACxC,IAAM,QAAQ,GAAG,KAAG,CAAC,KAAK,IAAI,GAAG,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;oCAC7D,IAAI,QAAQ,EAAE;wCACZ,KAAK,GAAG,QAAQ,CAAC;wCACjB,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;qCACzC;oCACD,OAAO,CAAC,KAAG,CAAC,CAAC;oCACb,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,EAAO,IAAK,OAAA,EAAE,CAAC,KAAG,EAAE,GAAG,CAAC,EAAZ,CAAY,CAAC,CAAC;iCAC9D;qCAAM;oCACL,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,EAAO,IAAK,OAAA,EAAE,CAAC,GAAG,CAAC,EAAP,CAAO,CAAC,CAAC;oCACtD,MAAM,CAAC,GAAG,CAAC,CAAC;iCACb;6BACF;wBACH,CAAC,CAAC;wBACF,GAAG,CAAC,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;wBAC1C,GAAG,CAAC,OAAO,GAAG,MAAM,CAAC;oBACvB,CAAC,CAAC,EAAC;;;KACN;IAGD;;;;OAIG;IACI,YAAG,GAAV,UAAW,GAAqB,EAAE,YAAiB;QAAnD,iBAoBC;QApBiC,6BAAA,EAAA,iBAAiB;QACjD,IAAI,GAAG,GAAW,oBAAG,CAAC,GAAG,CAAC,CAAC;QAC3B,QAAQ;QACR,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,gBAAS,GAAG,sDAAW,CAAC,CAAC;QAEnD,WAAW;QACX,wCAAwC;QACxC,kCAAkC;QAClC,sEAAsE;QACtE,MAAM;QACN,mBAAmB;QACnB,IAAI;QAEJ,OAAO;YACL,IAAI,EAAE,UAAO,GAAS;;;;;4BACd,MAAM,GAAG,6CAA6C,CAAC;4BACvD,MAAM,GAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC1C,qBAAM,QAAQ,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,EAAE,GAAG,EAAE,YAAY,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAA;gCAAhF,sBAAO,SAAyE,EAAC;;;iBAClF;SACF,CAAC;IACJ,CAAC;IAGD;;;;;;;OAOG;IACI,iBAAQ,GAAf;QACE,OAAO;YACL,IAAI,EAAE,UACJ,GAAuB,EACvB,EAAmB;gBACnB,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC7B,IAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC;gBACpC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACjC,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,GAAG,EAAE,UACH,GAAuB,EACvB,EAAmB;gBACnB,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC7B,IAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC;gBACpC,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,EAAO,EAAE,KAAa;oBACrD,IAAI,EAAE,KAAK,EAAE;wBAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC1D,CAAC,CAAC,CAAC;gBAAA,CAAC;gBACJ,OAAO,QAAQ,CAAC;YAClB,CAAC;SACF,CAAC;IACJ,CAAC;IApKc,gBAAO,GAAW,CAAC,KAAK;QACvC,CAAC,CAAC,YAAY,CAAC,IAAI;QACnB,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC;YACzE,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC;YACzD,CAAC,CAAC,YAAY,CAAC,OAAO,CACvB;IAiKH,eAAC;CAxKD,AAwKC,IAAA;kBAxKoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["/* tslint:disable */\r\n/**\r\n * Axios 二次封装 [未启用加密版]\r\n * author:  ShiLaiMu\r\n * version: v1.2.1\r\n * type:    TypeScript\r\n * encrypt: false\r\n * \r\n * 依赖:\r\n * @/config/api.config.ts\r\n * @/config/default.config.ts\r\n * npm install @types/axios @types/qs --save\r\n * \r\n * 全局:\r\n * [main.ts] Vue.prototype.$axios = axios;\r\n * \r\n * 功能:\r\n * - 全局统一：  请求api配置中的接口，实现一改配置修改全部请求\r\n * - 统一配置化: 请求信息，分离 [服务器配置文件] 和 [请求配置文件]，实现可配置 [主和子服务器/请求延迟/请求路由/请求方式/请求的目标服务器]\r\n * - 身份携带：  token自动化加入请求头，读取本地缓存\r\n * - 请求权重：  调用时指定的请求信息必定覆盖配置内的请求信息\r\n * - 路由参数：  配置文件中支持路由\r\n * - 临时令牌：  如果response header内存在token则会将它作为临时token，下次请求时使用\r\n * - 线上线下域：生产模式下自动切换为线上请求域，开发模式自动切换为内网域或开发本地域   ——   V1.1.6+\r\n * - 全局监听：  全局监听axios的事件，统一处理请求指定事件并及时响应   ——   V1.2.0+\r\n * - 内网请求：  内网访问及调试时，后端请求自动切换为内网域   ——   V1.2.1+\r\n * \r\n * 调用方法:\r\n * - 推荐:\r\n *   this.$axios.api('login', RequestConfig).then(console.log).catch(console.error)\r\n *   请求「@/config/api.config.ts」文件中 login 路由，并携带RequestConfig内的参数\r\n *   此方法的请求主机和和方法均为配置中的指向，如 testServer1:post./user/login 默认指向 testServer1 主机，使用post方法请求/user/login\r\n * \r\n * - 权重法:\r\n *   this.$axios.api('login').get(RequestConfig).then(console.log).catch(console.error)\r\n *   请求 login 路由，并携带RequestConfig内的参数，但会强制使用get方法请求，并非配置中的post请求，此时post可视为默认请求，但get为指定所以权重更高\r\n * \r\n * - 路由参数:\r\n *   RequestConfig 内可传入 params 对象，如路由为 testServer1:post./user/:username/login\r\n *   传入 RequestConfig = { params: { username: 'slm' } } 则会被转换为 testServer1:post./user/slm/login\r\n *\r\n * - 内网请求\r\n *   当请求为127.0.0.1或loaclhost且前端的域非两者之一，自动将请求域替换为当前前端的域，以实现内网请求及调试\r\n * \r\n * - 全局监听\r\n *   this.$axios.observer.emit(EventKey, callback)  绑定\r\n *   this.$axios.observer.off(EventKey, callback)   解绑\r\n *   EventKey: \r\n *      + response.updateToken  请求响应更新token时\r\n *      + response.error        请求响应错误时\r\n *      + response.default      请求默认响应时\r\n * \r\n * 配置方法：\r\n * - @/config/api.config.ts\r\n *   {  路由名: '服务器名:请求方法.路由' } 如 { login: 'test1:post./user/:user' } 服务器名和请求方法均为可选参数\r\n *   如 'post./user/:user' 或 'test1:/user/:user' 或 '/user/:user' 当请求方法不存在时默认为GET请求，当服务器名不存在时默认为主服务器\r\n */\r\n// api调用\r\nimport API from '../config/api.config';\r\n// 配置文件\r\nimport config from '../config/default.config';\r\n// 开发环境判断\r\nconst isDEV = CC_DEV;\r\n// token存储\r\nlet token: any = false;\r\n// 服务器配置\r\nconst serverConfig = config.server;\r\n// 频繁请求处理\r\nconst requestClock: any = {};\r\n// 观察者\r\nconst observer: any = {\r\n  /**\r\n   * 响应\r\n   */\r\n  response: {\r\n    /**\r\n     * 更新token时\r\n     */\r\n    updateToken: [],\r\n    /**\r\n     * 响应错误时\r\n     */\r\n    error: [],\r\n    /**\r\n     * 默认\r\n     */\r\n    default: [],\r\n  },\r\n};\r\n// 当前域\r\nconst locaHostName = window.location.hostname;\r\nconst localRegExp = /127\\.0\\.0\\.1|localhost/;\r\n\r\nlet ObserverKey: ('response' | 'response.error' | 'response.updateToken');\r\n\r\nexport default class HttpUtil {\r\n\r\n  private static baseUrl: string = !isDEV\r\n  ? serverConfig.host\r\n  : localRegExp.test(serverConfig.devHost) && !localRegExp.test(locaHostName)\r\n    ? serverConfig.devHost.replace(localRegExp, locaHostName)\r\n    : serverConfig.devHost\r\n  ;\r\n\r\n\r\n  /**\r\n   * 发送WEB请求\r\n   * @param method   - 请求方式\r\n   * @param url      - 请求链接\r\n   * @param config   - 请求参数\r\n   */\r\n  static async request(method: ( 'post' | 'get' | 'delete' | 'put' ) = 'get', url: string, config: any = {}, api?: string) {\r\n      if (!token) {\r\n        token = localStorage.getItem('token') || JSON.parse(localStorage.getItem('userInfo') || '{}').token;\r\n        if (token) {\r\n          token = encodeURIComponent(token);\r\n          observer.response.updateToken.forEach((cb: any) => cb(token));\r\n        }\r\n      } else token = encodeURIComponent(token);\r\n\r\n      let dataStr = '';\r\n      const { data } = config;\r\n      Object.keys(data || {}).forEach(key => {\r\n          dataStr += key + '=' + encodeURIComponent(data[key]) + '&';\r\n      })\r\n\r\n      if (dataStr !== '') {\r\n          dataStr = dataStr.substr(0, dataStr.lastIndexOf('&'));\r\n          if (method === 'get') {\r\n            url += '?' + dataStr;\r\n          }\r\n      }\r\n      \r\n      // 路径参数\r\n      const params = config.params || (data && data.params);\r\n      if (params && url) {\r\n        for (const key in params) {\r\n          if (params[key] !== undefined) {\r\n            url = url.replace(`:${key}`, params[key]);\r\n          }\r\n        }\r\n        delete config.params;\r\n        if (data) delete data.params;\r\n      }\r\n\r\n      // 统一处理路由\r\n      if (url && api) {\r\n        const targetServer = (url.match(/^(\\w+)(?=\\:)/) || [])[0];\r\n        if (targetServer) {\r\n          const targetChild = serverConfig.children[targetServer];\r\n          if (targetChild) {\r\n            url = url.replace(/^(\\w+)\\:/, '');\r\n            config.baseURL = !isDEV ? targetChild.host : targetChild.devHost;\r\n          } else  throw Error(`${targetServer} 子服务器未在配置内!`);\r\n        }\r\n        url = url.replace(/^(post|get|put|delete)\\./i, '');\r\n      }\r\n\r\n      \r\n      // 频繁请求拦截\r\n      const requestKey = method + url;\r\n      if (requestKey) {\r\n        const targetClock = requestClock[requestKey];\r\n        if (targetClock && targetClock > Date.now()) {\r\n          return Promise.reject({ error: '频繁请求拦截！', requestKey });\r\n        }\r\n        // requestClock[requestKey] = Date.now() + 400;\r\n        requestClock[requestKey] = Date.now() + 1;\r\n      }\r\n\r\n      if (api) {\r\n        url = HttpUtil.baseUrl + url;\r\n      }\r\n      return new Promise((resolve, reject) => {\r\n        let xhr = cc.loader.getXMLHttpRequest();\r\n        xhr.open(method.toLocaleUpperCase(), url, true);\r\n        xhr.setRequestHeader('Content-Type', `${method !== 'get' ? 'application/x-www-form-urlencoded' : 'text/plain' };charset=UTF-8`);\r\n        xhr.setRequestHeader('token', token);\r\n        xhr.onreadystatechange = function () {\r\n          if (xhr.readyState === 4) {\r\n            let response = xhr.responseText;\r\n            if (xhr.status >= 200 && xhr.status < 300) {\r\n              const res = JSON.parse(response) || xhr;\r\n              const newToken = res.token || xhr.getResponseHeader('token');\r\n              if (newToken) {\r\n                token = newToken;\r\n                localStorage.setItem('token', newToken);\r\n              }\r\n              resolve(res);\r\n              observer.response.default.forEach((cb: any) => cb(res, api));\r\n            } else {\r\n              observer.response.error.forEach((cb: any) => cb(xhr));\r\n              reject(xhr);\r\n            }\r\n          }\r\n        };\r\n        xhr.send(method !== 'get' ? dataStr : '');\r\n        xhr.onerror = reject;\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * 调用API请求\r\n   * @param api          - api\r\n   * @param axiosRequest - 请求体\r\n   */\r\n  static api(api: keyof typeof API, axiosRequest = {}) {\r\n    let URL: string = API[api];\r\n    // 未知API\r\n    if (!URL) throw new Error(`api: 「${api}」在配置内未定义!`);\r\n  \r\n    // // 动态API\r\n    // if (typeof api === 'object' && URL) {\r\n    //   for (const key in api.data) {\r\n    //     api.data[key] && (URL = URL.replace(`:${key}`, api.data[key]));\r\n    //   }\r\n    //   api = api.key;\r\n    // }\r\n  \r\n    return {\r\n      then: async (res?: any) => {\r\n        const regExp = /((\\w+)(?=\\:))?(post|get|put|delete)(?=\\.)/ig;\r\n        const method: any = (URL.match(regExp) || [])[0];\r\n        return await HttpUtil.request(method || 'get', URL, axiosRequest, api).then(res);\r\n      },\r\n    };\r\n  }\r\n\r\n\r\n  /**\r\n   * axios observer\r\n   * @param api - API库内的键\r\n   * @param axiosRequest\r\n   *        - 请求数据配置\r\n   *        - 仅 api(*, *).then() 时生效\r\n   * @return 链式操作请求方式，内部传入与axios相同，排除第一个URL\r\n   */\r\n  static observer() {\r\n    return {\r\n      emit: (\r\n        key: typeof ObserverKey,\r\n        cb: (param) => void,) => {\r\n        const split = key.split('.');\r\n        const parent = split[0];\r\n        const child = split[1] || 'default';\r\n        observer[parent][child].push(cb);\r\n        return HttpUtil;\r\n      },\r\n      off: (\r\n        key: typeof ObserverKey,\r\n        cb: (param) => void,) => {\r\n        const split = key.split('.');\r\n        const parent = split[0];\r\n        const child = split[1] || 'default';\r\n        observer[parent][child].forEach((fn: any, index: number) => {\r\n          if (cb === fn) observer[parent][child].splice(index, 1);\r\n        });;\r\n        return HttpUtil;\r\n      },\r\n    };\r\n  }\r\n\r\n}\r\n"]}