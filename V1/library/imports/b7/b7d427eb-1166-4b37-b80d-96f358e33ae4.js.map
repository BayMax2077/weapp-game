{"version":3,"sources":["assets\\scripts\\lib\\socketIO.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * socket-client 封装\r\n * author:  ShiLaiMu\r\n * version: v1.0.0\r\n * type:    TypeScript\r\n * encrypt: false\r\n *\r\n * 依赖:\r\n * @/config/default.config.ts\r\n * npm install @types/socket.io-clien --save\r\n *\r\n *\r\n * 全局:\r\n * [main.ts]\r\n *    import io from '@/utils/socketIO';\r\n *    io.use(Vue);\r\n *\r\n * 功能:\r\n * - 全局统一：  请求api配置中的接口，实现一改配置修改全部请求\r\n * - 内网连接：  内网访问及调试时，后端请求自动切换为内网域\r\n * - 多IO连接：  可同时连接多个IM系统并实现统一监听和发送\r\n *\r\n * 调用方法:\r\n * - 主IM:\r\n *     this.$socket.emit()\r\n *     this.$socket.on() 等 Socket 方法\r\n *\r\n * - 子IM:\r\n *     this.$io[配置内定义的IM名] 如配置内 io: { main: 'ws://127.0.0.1:7021', gameIM: 'ws://127.0.0.1:7022' }\r\n *     this.$io.gameIM.emit()\r\n *     this.$io.gameIM.on() 等 Socket 方法\r\n */\r\nconst io = require('./asocket.ioLib/asocket.io.js');\r\n// import * as io from './asocket.ioLib/asocket.io.js';\r\n// import State from './state';\r\nimport State from '../../scripts/utils/state';\r\nimport defaultConfig from '../../scripts/config/default.config';\r\nimport axios from '../../scripts/utils/axiosUtils';\r\nimport { Utils } from '../../scripts/interface/index';\r\n\r\n// IO配置文件引入\r\nconst IoConfig = defaultConfig.io;\r\n// 子IO\r\n// const ioChilder: { [key: string]: typeof io.Socket; } = {};\r\n// 账号token获取\r\n// 当前域\r\nconst locaHostName = window.location.hostname;\r\nconst localRegExp = /127\\.0\\.0\\.1|localhost/;\r\n// let clock = null;\r\n\r\nexport default {\r\n\r\n  /**\r\n   * 唯一连接\r\n   */\r\n  onlyConnect: false,\r\n\r\n  init() {\r\n    console.log('IO 机制加载成功!');\r\n    cc.game.on('tokenUpdate', this.connect.bind(this));\r\n    if (State.userInfo.token) {\r\n      this.connect(State.userInfo.token);\r\n    }\r\n  },\r\n\r\n  connect(token) {\r\n    if (this.onlyConnect) return;\r\n    console.log(`IO 连接中...`, token);\r\n\r\n    // 临时方案\r\n    axios.api('get_games_list').then((res: Utils.State['games']) => State.games = res);\r\n\r\n    let socket = io.connect(`${\r\n      (localRegExp.test(IoConfig.main) && !localRegExp.test(locaHostName)) || CC_DEV\r\n        ? IoConfig.dev.main.replace(localRegExp, locaHostName)\r\n        : IoConfig.main\r\n    }/`, \r\n    {\r\n      query: {\r\n        token: token,\r\n      },\r\n      forceNew: true,\r\n      transports: [ 'websocket' ],\r\n    });\r\n    \r\n    // 账号已在线检测\r\n    socket.on('onLine', data => {\r\n      State.io.online = true;\r\n      cc.game.emit('onLine', data);\r\n    });\r\n\r\n    // 连接成功\r\n    socket.on('connect', () => {\r\n      State.io = socket;\r\n      console.log(`IO 连接成功!`);\r\n      cc.game.emit('socketConnect');\r\n      socket.emit('connect/test');\r\n    });\r\n\r\n    // 链接处理\r\n    socket.on('reconnect', data => console.log('IO重连中...', data));\r\n\r\n    // 断开连接\r\n    socket.on('disconnect', data => {\r\n      console.log(data);\r\n      // 服务器关闭\r\n      // if (data === 'transport close') {\r\n      //   State.server.state = -1;\r\n      //   cc.game.emit('serverClose');\r\n      // }\r\n    });\r\n\r\n    // 自定义事件\r\n    socket.reconnect = () => {\r\n      socket.disconnect();\r\n      socket.connect();\r\n    }\r\n\r\n    // 用户数据更新\r\n    socket.on('updateUserData', data => cc.game.emit('updateUserData', data));\r\n    \r\n    State.io = socket;\r\n    window.socket = socket;\r\n    this.onlyConnect = true;\r\n  }\r\n};\r\n"]}